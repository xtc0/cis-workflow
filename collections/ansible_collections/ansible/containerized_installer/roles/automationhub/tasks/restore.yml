---
- name: Set automation hub facts
  ansible.builtin.include_tasks: facts.yml

- name: Set podman version facts
  ansible.builtin.include_role:
    name: common
    tasks_from: podman_facts.yml

- name: Stop automation hub systemd services
  ansible.builtin.include_tasks: systemd.yml
  vars:
    __systemd_state: stopped

- name: Invalid redis cache
  ansible.builtin.include_role:
    name: redis
    tasks_from: flush.yml
  vars:
    __redis_databases:
      - '{{ hub_redis_cache_db }}'

- name: Unarchive the automation hub data
  ansible.builtin.unarchive:
    src: '{{ hostvars["localhost"]["_backup_dir"] }}/hub_{{ inventory_hostname }}.tar.gz'
    dest: '{{ ansible_user_dir }}'
    exclude:
      - 'aap/tls'
      - '.local/share/containers/storage/secrets/'
      - 'aap/hub/nginx/etc/redirect-page.html'
      - 'aap/hub/etc/pulp.key'
      - 'aap/hub/etc/pulp.cert'

- name: Set automation hub secret facts
  ansible.builtin.include_role:
    name: common
    tasks_from: restore_secrets.yml
  vars:
    backup_file: '{{ hostvars["localhost"]["_backup_dir"] }}/hub_{{ inventory_hostname }}.tar.gz'

- name: Update the relevant hub secrets
  containers.podman.podman_secret:
    name: "{{ item }}"
    data: "{{ lookup('ansible.builtin.vars', '__old_' + item) | b64decode }}"
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'
  loop:
    - hub_secret_key
    - hub_resource_server
    - hub_database_fields

- name: Reconfigure containers
  ansible.builtin.include_tasks: containers.yml
  vars:
    __containers_recreate: true

- name: Create postgresql CLI aliases
  ansible.builtin.include_role:
    name: postgresql
    tasks_from: cli.yml
  vars:
    _postgresql_socket: '{{ hub_pg_socket | default("") }}'
    _postgresql_cert_auth: '{{ hub_pg_cert_auth }}'
    _postgresql_src_dir: '{{ hub_conf_dir }}'
    _postgresql_dest_dir: /etc/pulp/keys

- name: Add postgresql TLS environment variable for certificate authentication
  ansible.builtin.set_fact:
    _hub_pg_restore:
      PGSSLCERT: /etc/pulp/keys/postgresql.cert
      PGSSLKEY: /etc/pulp/keys/postgresql.key
      PGSSLROOTCERT: '{{ ca_trust_bundle }}'
  when: hub_pg_cert_auth | bool

- name: Grant createdb role to the automation hub postgresql user
  community.postgresql.postgresql_user:
    name: '{{ hub_pg_username }}'
    role_attr_flags: CREATEDB
    login_host: '{{ hub_pg_host }}'
    login_port: '{{ hub_pg_port }}'
    login_user: '{{ postgresql_admin_username | default("postgres") }}'
    login_password: '{{ postgresql_admin_password | default(omit) }}'
    login_db: '{{ postgresql_admin_database | default("postgres") }}'
    login_unix_socket: '{{ hub_pg_socket | default(omit) }}'
  run_once: true
  when: groups.get('database', []) | length == 1 or postgresql_admin_password is defined

- name: Restore the automation hub postgresql database
  community.postgresql.postgresql_db:
    name: template1
    login_host: '{{ hub_pg_host }}'
    login_port: '{{ hub_pg_port }}'
    login_user: '{{ hub_pg_username }}'
    login_password: '{{ hub_pg_password | default(omit) }}'
    login_unix_socket: '{{ hub_pg_socket | default(omit) }}'
    ssl_mode: '{{ hub_pg_sslmode }}'
    target: '{{ ansible_user_dir }}/aap/backups/{{ hub_pg_database }}.pgc'
    target_opts: '--create --clean --if-exists'
    state: restore
  environment: '{{ _hub_pg_restore | default({}) }}'
  run_once: true

- name: Revoke createdb role to the automation hub postgresql user
  community.postgresql.postgresql_user:
    name: '{{ hub_pg_username }}'
    role_attr_flags: NOCREATEDB
    login_host: '{{ hub_pg_host }}'
    login_port: '{{ hub_pg_port }}'
    login_user: '{{ postgresql_admin_username | default("postgres") }}'
    login_password: '{{ postgresql_admin_password | default(omit) }}'
    login_db: '{{ postgresql_admin_database | default("postgres") }}'
    login_unix_socket: '{{ hub_pg_socket | default(omit) }}'
  run_once: true
  when: groups.get('database', []) | length == 1 or postgresql_admin_password is defined

- name: Start automation hub systemd services
  ansible.builtin.include_tasks: systemd.yml
  vars:
    __systemd_state: started
...
