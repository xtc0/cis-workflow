---
- name: Get all podman secrets
  containers.podman.podman_secret_info:
  register: _secrets

- name: Get the existing hub resource server secret
  containers.podman.podman_container:
    name: hub-resource-server-secret
    image: '{{ _hub_image }}'
    command: cat /run/secrets/hub_resource_server
    detach: false
    rm: true
    secrets: ['hub_resource_server']
  register: _hub_resource_server
  no_log: true
  run_once: true
  changed_when: false
  when: _secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'hub_resource_server') | length > 0

- name: Set the hub resource server secret fact
  ansible.builtin.set_fact:
    __hub_resource_server: '{{ _hub_resource_server.stdout | default(hostvars[groups["automationgateway"][0]]["__hub_service_key"]) | trim }}'
  no_log: true
  run_once: true

- name: Get the existing hub database fields secret
  containers.podman.podman_container:
    name: hub-database-fields-secret
    image: '{{ _hub_image }}'
    command: cat /run/secrets/hub_database_fields
    detach: false
    rm: true
    secrets: ['hub_database_fields']
  register: _hub_database_fields
  no_log: true
  run_once: true
  changed_when: false
  when: _secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'hub_database_fields') | length > 0

- name: Set the hub database fields secret fact
  ansible.builtin.set_fact:
    __hub_database_fields: '{{ _hub_database_fields.stdout | default(lookup("ansible.containerized_installer.random_token")) }}'
  no_log: true
  run_once: true

- name: Create the hub settings secret
  containers.podman.podman_secret:
    name: hub_settings
    data: '{{ lookup("ansible.builtin.template", "settings.py.j2") }}'
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'
  notify:
    - Restart hub api
    - Restart hub content
    - Restart hub workers

- name: Create the hub database fields secret
  containers.podman.podman_secret:
    name: hub_database_fields
    data: '{{ __hub_database_fields }}'
    skip_existing: true
  notify:
    - Restart hub api
    - Restart hub content
    - Restart hub workers

- name: Create the collection signing key passphrase secret
  containers.podman.podman_secret:
    name: hub_collection_signing_passphrase
    data: '{{ hub_collection_signing_pass }}'
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'
  notify: Restart hub workers
  when:
    - hub_collection_signing | bool
    - hub_collection_signing_pass is defined

- name: Create the container signing key passphrase secret
  containers.podman.podman_secret:
    name: hub_container_signing_passphrase
    data: '{{ hub_container_signing_pass }}'
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'
  notify: Restart hub workers
  when:
    - hub_container_signing | bool
    - hub_container_signing_pass is defined

- name: Create the hub resource server secret
  containers.podman.podman_secret:
    name: hub_resource_server
    data: '{{ __hub_resource_server }}'
    skip_existing: true
  notify:
    - Restart hub api
    - Restart hub content
    - Restart hub workers

- name: Get the existing hub secret key secret
  containers.podman.podman_container:
    name: hub-secret-key-secret
    image: '{{ _hub_image }}'
    command: cat /run/secrets/hub_secret_key
    detach: false
    rm: true
    secrets: ['hub_secret_key']
  register: _hub_secret_key
  no_log: true
  run_once: true
  changed_when: false
  when: _secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'hub_secret_key') | length > 0

- name: Set the hub secret key secret fact
  ansible.builtin.set_fact:
    __hub_secret_key: '{{ _hub_secret_key.stdout | default(hub_secret_key) | default(_key_generated) }}'
  vars:
    _key_generated: '{{ lookup("ansible.builtin.password", "/dev/null chars=ascii_letters,digits length=128") }}'
  no_log: true
  run_once: true

- name: Create the hub secret key secret
  containers.podman.podman_secret:
    name: hub_secret_key
    data: '{{ __hub_secret_key }}'
    skip_existing: true
  notify:
    - Restart hub api
    - Restart hub content
    - Restart hub workers

- name: Get all podman secrets after update
  containers.podman.podman_secret_info:
  register: _secrets_update

- name: Set hub recreate container fact
  ansible.builtin.set_fact:
    __hub_recreate: '{{ _hub_before | difference(_hub_after) | length > 0 }}'
  vars:
    _hub_before: '{{ _secrets.secrets | map(attribute="ID") }}'
    _hub_after: '{{ _secrets_update.secrets | map(attribute="ID") }}'
...
