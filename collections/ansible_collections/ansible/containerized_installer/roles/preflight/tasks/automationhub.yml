---
- name: Ensure hub admin password is provided
  ansible.builtin.assert:
    that:
      - hub_admin_password is defined
      - hub_admin_password | length
    fail_msg: 'hub_admin_password must be set and not empty'

- name: Ensure hub postgresql sslmode is a valid choice
  ansible.builtin.assert:
    that:
      - hub_pg_sslmode in ['disable', 'allow', 'prefer', 'require', 'verify-ca', 'verify-full']
    fail_msg: 'Invalid hub postgresql sslmode value. Only disable, allow, prefer, require, verify-ca and verify-full values are allowed'
  when: hub_pg_sslmode is defined

- name: Ensure hub postgresql host is provided
  ansible.builtin.assert:
    that:
      - hub_pg_host is defined
      - hub_pg_host | length
    fail_msg: 'hub_pg_host must be set and not empty'

- name: Ensure hub postgresql password is provided
  ansible.builtin.assert:
    that:
      - hub_pg_password is defined
      - hub_pg_password | length
    fail_msg: 'hub_pg_password must be set and not empty'
  when: not hub_pg_cert_auth | default(false) | bool

- name: When using postgresql TLS authentication
  when:
    - hub_pg_cert_auth is defined
    - hub_pg_cert_auth | bool
  block:
    - name: Ensure using an external database
      ansible.builtin.assert:
        that:
          - groups.get('database', []) | length == 0
        fail_msg: 'Only external database topology supports postgresql TLS authentication'

    - name: Ensure hub TLS certificate/key are provided
      ansible.builtin.assert:
        that:
          - hub_pg_tls_cert is defined
          - hub_pg_tls_cert | length
          - hub_pg_tls_key is defined
          - hub_pg_tls_key | length
          - custom_ca_cert is defined
          - custom_ca_cert | length
        fail_msg: 'hub_pg_tls_cert, hub_pg_tls_key and custom_ca_cert must be set and not empty'

    - name: Ensure hub TLS certificate/key are provided with postgresql authentication enabled
      ansible.builtin.assert:
        that:
          - hub_pg_sslmode is defined
          - hub_pg_sslmode in ['verify-ca', 'verify-full']
        fail_msg: 'hub_pg_sslmode must be set and using either verify-ca or verify-full value'

- name: Ensure hub storage backend is a valid choice
  ansible.builtin.assert:
    that:
      - hub_storage_backend in ['azure', 'file', 's3']
    fail_msg: 'Invalid hub storage backend value.'
  when: hub_storage_backend is defined

- name: Ensure address for shared hub data storage is provided for multi-instance
  ansible.builtin.assert:
    that:
      - hub_shared_data_path | default('') | length
    fail_msg: |
      "Multi-Instannce Automation Hub is configured. "
      "In order to share the storage, an NFS share endpoint must be provided "
      "by setting hub_shared_data_path"
  when:
    - groups.get('automationhub', []) | length > 1
    - hub_storage_backend | default('file') == 'file'

- name: Ensure Azure blob storage variables are provided
  ansible.builtin.assert:
    that:
      - hub_azure_account_key is defined
      - hub_azure_account_key | length
      - hub_azure_account_name is defined
      - hub_azure_account_name | length
    fail_msg: 'hub_azure_account_key and hub_azure_account_name must be set and not empty'
  when:
    - hub_storage_backend is defined
    - hub_storage_backend == 'azure'

- name: Ensure AWS S3 storage variables are provided
  ansible.builtin.assert:
    that:
      - hub_s3_access_key is defined
      - hub_s3_access_key | length
      - hub_s3_secret_key is defined
      - hub_s3_secret_key | length
    fail_msg: 'hub_s3_access_key and hub_s3_secret_key must be set and not empty'
  when:
    - hub_storage_backend is defined
    - hub_storage_backend == 's3'

- name: Ensure hub_galaxy_importer structure is valid
  ansible.builtin.assert:
    that:
      - hub_galaxy_importer is mapping
      - hub_galaxy_importer | length > 0
    fail_msg: 'hub_galaxy_importer must be a non empty dictionary'
  when: hub_galaxy_importer is defined

- name: Ensure automation hub url format when provided
  ansible.builtin.assert:
    that:
      - hub_main_url | length
      - hub_main_url is regex('^https?://.*')
    fail_msg: "hub_main_url must start with http:// or https:// prefix"
  when: hub_main_url is defined

- name: Check the automation hub postinstall
  when: hub_postinstall | default(false) | bool
  block:
    - name: Ensure hub postinstall directory is provided
      ansible.builtin.assert:
        that:
          - hub_postinstall_dir is defined
          - hub_postinstall_dir | length
        fail_msg: 'hub_postinstall_dir must be set and not empty hub_postinstall=true'

    - name: Check the hub postinstall directory
      ansible.builtin.stat:
        path: '{{ hub_postinstall_dir }}'
      register: _hub_postinstall_dir

    - name: Validate that the postinstall directory exists
      ansible.builtin.assert:
        that:
          - _hub_postinstall_dir.stat.exists | bool
          - _hub_postinstall_dir.stat.isdir | bool
        fail_msg: 'The hub postinstall directory must exist on the ansible host'
      when: hub_postinstall_repo_url is not defined

- name: Check the collection signing when using collections auto sign
  ansible.builtin.assert:
    that:
      - hub_collection_signing | default(false) | bool
    fail_msg: 'Collections auto sign requires to enable hub_collection_signing'
  when: hub_collection_auto_sign | default(false) | bool

- name: Check the automation hub collection signing
  when: hub_collection_signing | default(false) | bool
  block:
    - name: Check the automation hub collection signing key
      ansible.builtin.assert:
        that:
          - hub_collection_signing_key is defined
          - hub_collection_signing_key | length
        fail_msg: 'hub_collection_signing_key must be set and not empty'

    - name: Check the automation hub collection signing key file
      ansible.builtin.stat:
        path: '{{ hub_collection_signing_key }}'
      register: _hub_collection_signing_key

    - name: Validate that automation hub collection signing key file exists
      ansible.builtin.assert:
        that:
          - _hub_collection_signing_key.stat.exists | bool
          - _hub_collection_signing_key.stat.isreg | bool
        fail_msg: 'The hub collection key must exist on the ansible host'

    - name: Check the automation hub collection signing key passphrase
      ansible.builtin.assert:
        that:
          - hub_collection_signing_pass | length
        fail_msg: 'hub_collection_signing_pass must not be empty'
      when: hub_collection_signing_pass is defined

- name: Check the automation hub container signing
  when: hub_container_signing | default(false) | bool
  block:
    - name: Check the automation hub container signing key
      ansible.builtin.assert:
        that:
          - hub_container_signing_key is defined
          - hub_container_signing_key | length
        fail_msg: 'hub_container_signing_key must be set and not empty'

    - name: Check the automation hub container signing key file
      ansible.builtin.stat:
        path: '{{ hub_container_signing_key }}'
      register: _hub_container_signing_key

    - name: Validate that automation hub container signing key file exists
      ansible.builtin.assert:
        that:
          - _hub_container_signing_key.stat.exists | bool
          - _hub_container_signing_key.stat.isreg | bool
        fail_msg: 'The hub container key must exist on the ansible host'

    - name: Check the automation hub container signing key passphrase
      ansible.builtin.assert:
        that:
          - hub_container_signing_pass | length
        fail_msg: 'hub_container_signing_pass must not be empty'
      when: hub_container_signing_pass is defined

- name: Ensure gnupg directory exists
  ansible.builtin.file:
    path: '{{ ansible_user_dir }}/.gnupg'
    state: directory
    mode: '0700'
  when: hub_collection_signing | default(false) | bool or hub_container_signing | default(false) | bool
...
