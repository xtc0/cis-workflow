---
- name: Ensure eda admin password is provided
  ansible.builtin.assert:
    that:
      - eda_admin_password is defined
      - eda_admin_password | length
    fail_msg: 'eda_admin_password must be set and not empty'

- name: Ensure eda postgresql sslmode is a valid choice
  ansible.builtin.assert:
    that:
      - eda_pg_sslmode in ['disable', 'allow', 'prefer', 'require', 'verify-ca', 'verify-full']
    fail_msg: 'Invalid eda postgresql sslmode value. Only disable, allow, prefer, require, verify-ca and verify-full values are allowed'
  when: eda_pg_sslmode is defined

- name: Ensure eda postgresql host is provided
  ansible.builtin.assert:
    that:
      - eda_pg_host is defined
      - eda_pg_host | length
    fail_msg: 'eda_pg_host must be set and not empty'

- name: Ensure eda postgresql password is provided
  ansible.builtin.assert:
    that:
      - eda_pg_password is defined
      - eda_pg_password | length
    fail_msg: 'eda_pg_password must be set and not empty'
  when: not eda_pg_cert_auth | default(false) | bool

- name: When using postgresql TLS authentication
  when:
    - eda_pg_cert_auth is defined
    - eda_pg_cert_auth | bool
  block:
    - name: Ensure using an external database
      ansible.builtin.assert:
        that:
          - groups.get('database', []) | length == 0
        fail_msg: 'Only external database topology supports postgresql TLS authentication'

    - name: Ensure eda TLS certificate/key are provided
      ansible.builtin.assert:
        that:
          - eda_pg_tls_cert is defined
          - eda_pg_tls_cert | length
          - eda_pg_tls_key is defined
          - eda_pg_tls_key | length
          - custom_ca_cert is defined
          - custom_ca_cert | length
        fail_msg: 'eda_pg_tls_cert, eda_pg_tls_key and custom_ca_cert must be set and not empty'

    - name: Ensure eda TLS certificate/key are provided with postgresql authentication enabled
      ansible.builtin.assert:
        that:
          - eda_pg_sslmode is defined
          - eda_pg_sslmode in ['verify-ca', 'verify-full']
        fail_msg: 'eda_pg_sslmode must be set and using either verify-ca or verify-full value'

- name: Ensure eda_max_running_activations in a positive integer
  ansible.builtin.assert:
    that:
      - eda_max_running_activations | int > 0
    fail_msg: 'eda_max_running_activations must be greater than 0'
  when: eda_max_running_activations is defined

- name: Ensure eda type is a valid choice
  ansible.builtin.assert:
    that:
      - _eda_types | difference(_eda_allowed_types) | length == 0
    fail_msg: 'Invalid eda type value. Only api, hybrid, event-stream and worker are allowed'
  vars:
    _eda_allowed_types: ['api', 'hybrid', 'event-stream', 'worker']
    _eda_types: '{{ groups["automationeda"] | map("extract", hostvars) | selectattr("eda_type", "defined") | map(attribute="eda_type") | unique }}'

- name: Ensure api, event-stream and worker node exist when no hybrid
  ansible.builtin.assert:
    that:
      - _eda_api | int > 0
      - _eda_event_stream | int > 0
      - _eda_worker | int > 0
    fail_msg: 'You need at least 1 api node, 1 event-stream node and 1 worker node if there are no hybrid nodes.'
  vars:
    _eda_type: '{{ groups["automationeda"] | map("extract", hostvars) | selectattr("eda_type", "defined") }}'
    _eda_api: '{{ _eda_type | selectattr("eda_type", "equalto", "api") | length }}'
    _eda_hybrid: '{{ _eda_type | selectattr("eda_type", "equalto", "hybrid") | length }}'
    _eda_default: '{{ groups["automationeda"] | map("extract", hostvars) | selectattr("eda_type", "undefined") | length }}'
    _eda_event_stream: '{{ _eda_type | selectattr("eda_type", "equalto", "event-stream") | length }}'
    _eda_worker: '{{ _eda_type | selectattr("eda_type", "equalto", "worker") | length }}'
  when:
    - _eda_default | int == 0
    - _eda_hybrid | int == 0

- name: Check DE extra images structure
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name | length > 0
      - item.image is defined
      - item.image | length > 0
    fail_msg: 'Items in de_extra_images need to have both name and image keys defined and not empty'
  loop: '{{ de_extra_images }}'
  when:
    - de_extra_images is defined
    - de_extra_images | length > 0

- name: Ensure automation eda event-stream url format when provided
  ansible.builtin.assert:
    that:
      - eda_event_stream_url | length
      - eda_event_stream_url is regex('^https?://.*')
    fail_msg: "eda_event_stream_url must start with http:// or https:// prefix"
  when: eda_event_stream_url is defined
...
