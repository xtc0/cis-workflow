---
- name: Initialize the automation controller database
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage migrate --noinput'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _migrate
  changed_when: "'No migrations to apply' not in _migrate.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _migrate is not failed

- name: Create the default execution environments
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_default_execution_environments'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_ee
  changed_when: "'(changed: True)' in _register_ee.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _register_ee is not failed

- name: Register the controller instance in the database
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage provision_instance --hostname={{ _receptor_hostname }} --uuid={{ ansible_product_uuid }} --node_type={{ _receptor_type }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _provision_instance
  changed_when: "'(changed: True)' in _provision_instance.stdout"
  retries: 5
  delay: 60
  until: _provision_instance is not failed

- name: Register the execution/hop instances in the database
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage provision_instance --hostname={{ hostname }} --uuid={{ uuid }} --node_type={{ type }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _provision_instance
  changed_when: "'(changed: True)' in _provision_instance.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _provision_instance is not failed
  loop: '{{ groups.get("execution_nodes", []) }}'
  vars:
    hostname: '{{ hostvars[item]["_receptor_hostname"] }}'
    type: '{{ hostvars[item]["_receptor_type"] }}'
    uuid: '{{ hostvars[item]["ansible_product_uuid"] }}'

- name: Set the receptor listener port
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage add_receptor_address --instance={{ hostname }} --address={{ hostname }} --port={{ listen }} --canonical'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _receptor_address
  changed_when: "'(changed: True)' in _receptor_address.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _receptor_address is not failed
  loop: '{{ groups["automationcontroller"] + groups.get("execution_nodes", []) }}'
  vars:
    hostname: '{{ hostvars[item]["_receptor_hostname"] }}'
    listen: '{{ hostvars[item]["_receptor_port"] }}'

- name: Register controller peers in the database
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_peers {{ _receptor_hostname }} --exact {{ peers }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_peers
  changed_when: not _register_peers.stdout | regex_search('^0 peer links added')
  retries: 5
  delay: 60
  until: _register_peers is not failed
  vars:
    peers: '{{ " ".join(_receptor_peers | map("extract", hostvars) | map(attribute="_receptor_hostname")) }}'
  when: _receptor_peers | length > 0

- name: Register other peers in the database
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_peers {{ hostname }} --exact {{ peers }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_peers
  changed_when: not _register_peers.stdout | regex_search('^0 peer links added')
  run_once: true
  retries: 5
  delay: 60
  until: _register_peers is not failed
  vars:
    hostname: '{{ hostvars[item]["_receptor_hostname"] }}'
    peers: '{{ " ".join(hostvars[item]["_receptor_peers"] | map("extract", hostvars) | map(attribute="_receptor_hostname")) }}'
  loop: '{{ groups.get("execution_nodes", []) }}'
  when: hostvars[item]["_receptor_peers"] | length > 0

- name: Register controller nodes to default queue
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_queue --queuename=default --hostname={{ _controller_hostname }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_queue
  changed_when: "'(changed: True)' in _register_queue.stdout"
  retries: 5
  delay: 60
  until: _register_queue is not failed

- name: Register execution nodes to default queue
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_queue --queuename=default --hostname={{ nodes }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_queue
  changed_when: "'(changed: True)' in _register_queue.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _register_queue is not failed
  vars:
    executions: '{{ groups["execution_nodes"] | map("extract", hostvars) }}'
    nodes: '{{ ",".join(executions | selectattr("_receptor_type", "equalto", "execution") | map(attribute="_receptor_hostname")) }}'
  when: groups.get('execution_nodes', []) | length > 0

- name: Register controller nodes to controlplane queue
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_queue --queuename=controlplane --hostname={{ _controller_hostname }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_queue
  changed_when: "'(changed: True)' in _register_queue.stdout"
  retries: 5
  delay: 60
  until: _register_queue is not failed

- name: Register execution nodes to executionplane queue
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage register_queue --queuename=executionplane --hostname={{ nodes }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _register_queue
  changed_when: "'(changed: True)' in _register_queue.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _register_queue is not failed
  vars:
    executions: '{{ groups["execution_nodes"] | map("extract", hostvars) }}'
    nodes: '{{ ",".join(executions | selectattr("_receptor_type", "equalto", "execution") | map(attribute="_receptor_hostname")) }}'
  when: groups.get('execution_nodes', []) | length > 0

- name: Create django super user
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage createsuperuser --username={{ controller_admin_user }} --email={{ controller_admin_email }} --noinput'
    env:
      ANSIBLE_REVERSE_RESOURCE_SYNC: false
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _createsuperuser
  changed_when: "'Superuser created successfully' in _createsuperuser.stdout"
  failed_when: false
  run_once: true
  retries: 5
  delay: 60
  until: _createsuperuser is not failed

- name: Update django super user password
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage update_password --username={{ controller_admin_user }} --password={{ controller_admin_password }}'
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _superuser_password
  changed_when: "'Password updated' in _superuser_password.stdout"
  no_log: true
  run_once: true
  retries: 5
  delay: 60
  until: _superuser_password is not failed

- name: Create the default organization
  containers.podman.podman_container:
    name: automation-controller-init
    image: '{{ _controller_image }}'
    command: 'awx-manage create_preload_data'
    env:
      ANSIBLE_REVERSE_RESOURCE_SYNC: false
    detach: false
    rm: true
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _common_volumes }}'
  register: _preload_data
  changed_when: "'(changed: True)' in _preload_data.stdout"
  run_once: true
  retries: 5
  delay: 60
  until: _preload_data is not failed
...
