---
- name: Get automation controller version
  ansible.builtin.include_tasks: version.yml

- name: Set automation controller facts
  ansible.builtin.include_tasks: facts.yml

- name: Create podman volumes
  ansible.builtin.include_tasks: volumes.yml
  vars:
    __volume_state: present

- name: Create the controller directories
  ansible.builtin.file:
    path: '{{ item }}'
    mode: '0770'
    state: directory
  loop:
    - '{{ controller_conf_dir }}/conf.d'
    - '{{ controller_data_dir }}/job_execution'
    - '{{ controller_data_dir }}/logs'
    - '{{ controller_data_dir }}/projects'
    - '{{ controller_data_dir }}/rsyslog'

- name: Configure postgresql
  ansible.builtin.include_tasks: postgresql.yml
  args:
    apply:
      run_once: true
  when: groups.get('database', []) | length == 1 or postgresql_admin_password is defined

- name: Configure TLS
  ansible.builtin.include_tasks: tls.yml
  when: not controller_nginx_disable_https | bool

- name: Configure TLS for postgresql
  ansible.builtin.include_tasks: tls_postgresql.yml
  when: controller_pg_cert_auth | bool

- name: Configure nginx
  ansible.builtin.include_tasks: nginx.yml

- name: Configure rsyslog
  ansible.builtin.include_tasks: rsyslog.yml

- name: Configure supervisor
  ansible.builtin.include_tasks: supervisor.yml

- name: Configure podman secrets
  ansible.builtin.include_tasks: secrets.yml

- name: Create the controller configuration
  ansible.builtin.template:
    src: settings.py.j2
    dest: '{{ controller_conf_dir }}/settings.py'
    mode: '0640'
  notify:
    - Restart controller rsyslog
    - Restart controller task
    - Restart controller web

- name: Create the controller extra configurations
  ansible.builtin.template:
    src: '{{ item }}.py.j2'
    dest: '{{ controller_conf_dir }}/conf.d/{{ item }}.py'
    mode: '0640'
  loop:
    - callback_receiver_workers
    - cluster_host_id
    - container_groups
    - execution_environments
    - insights
    - redis
    - subscription_usage_model
  vars:
    __dest: '{{ (__dest_port | int == 443) | ternary(__dest_host, __dest_host + ":" + __dest_port) }}'
    __dest_url: '{{ hostvars[groups["automationgateway"][0]]["_gateway_proxy_url"] }}'
    __dest_host: '{{ __dest_url | urlsplit("hostname") }}'
    __dest_port: '{{ __dest_url | urlsplit("port") | ternary(__dest_url | urlsplit("port"), 443) }}'
  notify:
    - Restart controller rsyslog
    - Restart controller task
    - Restart controller web

- name: Check current somaxconn value
  ansible.builtin.slurp:
    src: /proc/sys/net/core/somaxconn
  register: somaxconn

- name: Check current net.ipv4.tcp_max_syn_backlog value
  ansible.builtin.slurp:
    src: /proc/sys/net/ipv4/tcp_max_syn_backlog
  register: tcp_max_syn_backlog

- name: Set somaxconn to value greater than or equal to controller_uwsgi_listen_queue_size in supervisor config
  ansible.posix.sysctl:
    name: net.core.somaxconn
    value: "{{ controller_uwsgi_listen_queue_size }}"
    sysctl_set: true
  become: true
  when: (controller_uwsgi_listen_queue_size | int) > (somaxconn['content'] | b64decode | int)

- name: Set tcp_max_syn_backlog to value greater than or equal to controller_uwsgi_listen_queue_size in supervisor config
  ansible.posix.sysctl:
    name: net.ipv4.tcp_max_syn_backlog
    value: "{{ controller_uwsgi_listen_queue_size }}"
    sysctl_set: true
  become: true
  when: (controller_uwsgi_listen_queue_size | int) > (tcp_max_syn_backlog['content'] | b64decode | int)

- name: Create the controller uwsgi configuration
  ansible.builtin.template:
    src: uwsgi.ini.j2
    dest: '{{ controller_conf_dir }}/uwsgi.ini'
    mode: '0640'
  notify: Restart controller web

- name: Create task custom command
  ansible.builtin.template:
    src: launch_awx_task.sh.j2
    dest: '{{ controller_conf_dir }}/launch_awx_task.sh'
    mode: '0755'

- name: Handle container image update
  ansible.builtin.include_tasks: update.yml

- name: Configure containers
  ansible.builtin.include_tasks: containers.yml
  vars:
    __containers_recreate: '{{ __controller_recreate }}'

- name: Initialize data
  ansible.builtin.include_tasks: init.yml

- name: Ensure automation controller containers are enabled and started
  ansible.builtin.include_tasks: systemd.yml
  vars:
    __systemd_enabled: true
    __systemd_state: started

- name: Add firewalld rules
  ansible.builtin.include_tasks: firewalld.yml
  vars:
    __firewalld_state: enabled

- name: Configure the license
  ansible.builtin.include_tasks: license.yml
  args:
    apply:
      run_once: true
  when: controller_license_file is defined
...
