#jinja2: lstrip_blocks: True

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

worker_processes  auto;

pid        /run/nginx/nginx.pid;
error_log  /dev/stdout error;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server_tokens off;

    log_format  main  '"$time_local" client=$remote_addr '
                      'method=$request_method request="$request" '
                      'request_length=$request_length '
                      'status=$status bytes_sent=$bytes_sent '
                      'body_bytes_sent=$body_bytes_sent '
                      'referer=$http_referer '
                      'user_agent="$http_user_agent" '
                      'upstream_addr=$upstream_addr '
                      'upstream_status=$upstream_status '
                      'request_time=$request_time '
                      'upstream_response_time=$upstream_response_time '
                      'upstream_connect_time=$upstream_connect_time '
                      'upstream_header_time=$upstream_header_time '
                      'request_id="$http_x_request_id"';


    access_log  /dev/stdout  main;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    types_hash_max_size 4096;

    upstream uwsgi {
        server 127.0.0.1:{{ controller_uwsgi_port }};
    }

    upstream daphne {
        server 127.0.0.1:{{ controller_daphne_port }};
    }

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        {% if not controller_nginx_disable_https | bool %}
        listen {{ controller_nginx_https_port }} default_server ssl http2;
        {% if ansible_all_ipv6_addresses | length > 0 %}
        listen [::]:{{ controller_nginx_https_port }} default_server ssl http2;
        {% endif %}
        {% else %}
        listen {{ controller_nginx_http_port }} default_server;
        {% if ansible_all_ipv6_addresses | length > 0 %}
        listen [::]:{{ controller_nginx_http_port }} default_server;
        {% endif %}
        {% endif %}

        # If you have a domain name, this is where to add it
        server_name _;
        keepalive_timeout 65;

        # The default client_max_body_size is 1m. Clients uploading
        # files larger than this will need to chunk said files.
        client_max_body_size {{ controller_nginx_client_max_body_size }};

        {% if not controller_nginx_disable_https | bool %}
        ssl_certificate /etc/tower/tower.cert;
        ssl_certificate_key /etc/tower/tower.key;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        ssl_protocols {{ controller_nginx_https_protocols | join(' ') }};
        # RHEL system crypto policy
        ssl_ciphers PROFILE=SYSTEM;
        ssl_prefer_server_ciphers on;
        {% endif %}

        {% if not controller_nginx_disable_hsts | bool %}
        # HSTS (ngx_http_headers_module is required, max-age in seconds)
        add_header Strict-Transport-Security max-age={{ controller_nginx_hsts_max_age }};
        {% endif %}

        # headers added with controller_nginx_user_headers variable
{% for header in controller_nginx_user_headers %}
        add_header {{ header }};
{% endfor %}
        # end of headers added with controller_nginx_user_headers variable

        # Protect against click-jacking https://www.owasp.org/index.php/Testing_for_Clickjacking_(OTG-CLIENT-009)
        add_header X-Frame-Options "DENY";
        # Protect against MIME content sniffing https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
        add_header X-Content-Type-Options nosniff;

        gzip on;
        gzip_comp_level 6;
        gzip_proxied any;
        gzip_types text/css text/javascript text/plain text/xml application/javascript application/json application/xml;
        gzip_vary on;

        location /favicon.ico {
            alias /var/lib/awx/public/static/media/favicon.ico;
            expires 1d;
        }
        location /locales {
            alias /var/lib/awx/public/static/awx/locales;
            expires 1d;
        }
        location /static {
            alias /var/lib/awx/public/static;
            expires 1d;
        }

        location ~ ^(/websocket/|/api/websocket/|/api/controller/v2/websocket/) {
            # Pass request to the upstream alias
            proxy_pass http://daphne;
            # Require http version 1.1 to allow for upgrade requests
            proxy_http_version 1.1;
            # We want proxy_buffering off for proxying to websockets.
            proxy_buffering off;
            # http://en.wikipedia.org/wiki/X-Forwarded-For
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            {% if not controller_nginx_disable_https | bool %}
            # enable this if you use HTTPS:
            proxy_set_header X-Forwarded-Proto $scheme;
            {% endif %}
            # pass the Host: header from the client for the sake of redirects
            proxy_set_header Host $http_host;
            # We've set the Host header, so we don't need Nginx to muddle
            # about with redirects
            proxy_redirect off;
            # Depending on the request value, set the Upgrade and
            # connection headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location / {
            # Redirect if there is no forward-slash
            rewrite ^(.*)$http_host(.*[^/])$ $1$http_host$2/ permanent;

            {% if not controller_nginx_disable_https | bool %}
            if ($http_x_forwarded_proto = "http") {
            rewrite ^ https://$host$request_uri? permanent;
            }
            {% endif %}

            uwsgi_read_timeout 120s;
            uwsgi_pass uwsgi;
            include /etc/nginx/uwsgi_params;

            # Protect against click-jacking https://www.owasp.org/index.php/Testing_for_Clickjacking_(OTG-CLIENT-009)
            add_header X-Frame-Options "DENY";
            add_header X-Content-Type-Options nosniff;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Expires "0";
            add_header Pragma "no-cache";
        }
    }

    {% if not controller_nginx_disable_https | bool %}
    server {
        listen {{ controller_nginx_http_port }} default_server;
        {% if ansible_all_ipv6_addresses | length > 0 %}
        listen [::]:{{ controller_nginx_http_port }} default_server;
        {% endif %}
        server_name _;
        {% if controller_nginx_http_port | int == 443 %}
        return 301 https://$host$request_uri;
        {% else %}
        return 301 https://$host:{{ controller_nginx_https_port }}$request_uri;
        {% endif %}
    }
    {% endif %}
}
