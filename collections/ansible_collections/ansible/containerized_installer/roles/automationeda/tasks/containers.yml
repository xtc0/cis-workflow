---
- name: Create the automation eda api container
  containers.podman.podman_container:
    name: automation-eda-api
    image: '{{ _eda_image }}'
    command: 'gunicorn --bind 127.0.0.1:{{ eda_gunicorn_port }} --workers {{ eda_gunicorn_workers }} aap_eda.wsgi:application'
    generate_systemd:
      container_prefix: ''
      path: '{{ ansible_user_dir }}/.config/systemd/user'
      separator: ''
      requires: '{{ __systemd_requires }}'
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _api_volumes }}'
    env: '{{ _common_env }}'
    label: '{{ _autoupdate_label }}'
    state: created
    recreate: '{{ __containers_recreate | default(false) }}'
  notify: Restart eda api

- name: Create the automation eda daphne container
  containers.podman.podman_container:
    name: automation-eda-daphne
    image: '{{ _eda_image }}'
    command: 'daphne --bind 127.0.0.1 --port {{ eda_daphne_port }} aap_eda.asgi:application'
    generate_systemd:
      container_prefix: ''
      path: '{{ ansible_user_dir }}/.config/systemd/user'
      separator: ''
      requires: '{{ __systemd_requires }}'
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _api_volumes }}'
    env: '{{ _common_env }}'
    label: '{{ _autoupdate_label }}'
    state: created
    recreate: '{{ __containers_recreate | default(false) }}'
  notify: Restart eda daphne
  when: eda_type in ['hybrid', 'worker']

- name: Create the automation eda web container
  containers.podman.podman_container:
    name: automation-eda-web
    image: '{{ _eda_web_image }}'
    generate_systemd:
      container_prefix: ''
      path: '{{ ansible_user_dir }}/.config/systemd/user'
      separator: ''
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    mount:
      - 'type=tmpfs,destination=/run/nginx,U=true'
    volume: '{{ _web_volumes }}'
    label: '{{ _autoupdate_label }}'
    state: created
    recreate: '{{ __containers_recreate | default(false) }}'
  notify: Restart eda web

- name: Create the automation eda worker container
  containers.podman.podman_container:
    name: 'automation-eda-worker-{{ item }}'
    image: '{{ _eda_image }}'
    command: 'aap-eda-manage rqworker --worker-class aap_eda.core.tasking.DefaultWorker'
    generate_systemd:
      container_prefix: ''
      path: '{{ ansible_user_dir }}/.config/systemd/user'
      separator: ''
      requires: '{{ __systemd_requires }}'
      restart_policy: always
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _worker_volumes }}'
    env: '{{ _worker_env }}'
    label: '{{ _autoupdate_label }}'
    security_opt: ['label=disable']
    state: created
    recreate: '{{ __containers_recreate | default(false) }}'
  notify: Restart eda workers
  loop: '{{ eda_workers_range }}'
  when: eda_type in ['hybrid', 'worker']

- name: Create the automation eda activation worker container
  containers.podman.podman_container:
    name: 'automation-eda-activation-worker-{{ item }}'
    image: '{{ _eda_image }}'
    command: 'aap-eda-manage rqworker --worker-class aap_eda.core.tasking.ActivationWorker'
    generate_systemd:
      container_prefix: ''
      path: '{{ ansible_user_dir }}/.config/systemd/user'
      separator: ''
      requires: '{{ __systemd_requires }}'
      restart_policy: always
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _worker_volumes }}'
    env: '{{ _worker_env }}'
    label: '{{ _autoupdate_label }}'
    security_opt: ['label=disable']
    state: created
    recreate: '{{ __containers_recreate | default(false) }}'
  notify: Restart eda activation workers
  loop: '{{ eda_activation_workers_range }}'
  when: eda_type in ['hybrid', 'worker']

- name: Create the automation eda scheduler container
  containers.podman.podman_container:
    name: automation-eda-scheduler
    image: '{{ _eda_image }}'
    command: 'aap-eda-manage scheduler'
    generate_systemd:
      container_prefix: ''
      path: '{{ ansible_user_dir }}/.config/systemd/user'
      separator: ''
      requires: '{{ __systemd_requires }}'
      restart_policy: always
    log_driver: '{{ container_log_driver }}'
    user: '{{ ansible_user_uid }}'
    userns: keep-id
    network: host
    secrets: '{{ _common_secrets }}'
    volume: '{{ _scheduler_volumes }}'
    env: '{{ _common_env }}'
    label: '{{ _autoupdate_label }}'
    state: created
    recreate: '{{ __containers_recreate | default(false) }}'
  notify: Restart eda scheduler
  when: eda_type in ['hybrid', 'worker']
...
