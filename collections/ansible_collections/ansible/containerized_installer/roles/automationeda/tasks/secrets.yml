---
- name: Get all podman secrets
  containers.podman.podman_secret_info:
  register: _secrets

- name: Get the existing eda resource server secret
  containers.podman.podman_container:
    name: eda-resource-server-secret
    image: '{{ _eda_image }}'
    command: cat /run/secrets/eda_resource_server
    detach: false
    rm: true
    secrets: ['eda_resource_server']
  register: _eda_resource_server
  no_log: true
  run_once: true
  changed_when: false
  when: _secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'eda_resource_server') | length > 0

- name: Set the eda resource server secret fact
  ansible.builtin.set_fact:
    __eda_resource_server: '{{ _eda_resource_server.stdout | default(_key_generated) }}'
  vars:
    _key_generated: '{{ hostvars[groups["automationgateway"][0]]["__eda_service_key"] }}'
  no_log: true
  run_once: true

- name: Get the existing eda SECRET_KEY secret
  containers.podman.podman_container:
    name: eda-secret-key-secret
    image: '{{ _eda_image }}'
    command: cat /run/secrets/eda_secret_key
    detach: false
    rm: true
    secrets: ['eda_secret_key']
  register: _eda_secret_key
  no_log: true
  run_once: true
  changed_when: false
  when: _secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'eda_secret_key') | length > 0

- name: Set the eda SECRET_KEY secret fact
  ansible.builtin.set_fact:
    __eda_secret_key: '{{ _eda_secret_key.stdout | default(eda_secret_key) | default(_key_generated) }}'
  vars:
    _key_generated: '{{ lookup("ansible.builtin.password", "/dev/null chars=ascii_letters,digits length=128") }}'
  no_log: true
  run_once: true

- name: Create the eda admin password secret
  containers.podman.podman_secret:
    name: eda_admin_password
    data: '{{ eda_admin_password }}'
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'

- name: Create the eda SECRET_KEY secret
  containers.podman.podman_secret:
    name: eda_secret_key
    data: '{{ __eda_secret_key }}'
    skip_existing: true
  notify:
    - Restart eda api
    - Restart eda daphne
    - Restart eda workers
    - Restart eda activation workers
    - Restart eda scheduler

- name: Create the eda resource server secret
  containers.podman.podman_secret:
    name: eda_resource_server
    data: '{{ __eda_resource_server }}'
    skip_existing: true
  notify:
    - Restart eda api
    - Restart eda daphne
    - Restart eda workers
    - Restart eda activation workers
    - Restart eda scheduler

- name: Create the eda db password secret
  containers.podman.podman_secret:
    name: eda_db_password
    data: '{{ eda_pg_password }}'
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'
  notify:
    - Restart eda api
    - Restart eda daphne
    - Restart eda workers
    - Restart eda activation workers
    - Restart eda scheduler
  when: not eda_pg_cert_auth | bool

- name: Create the eda redis password secret
  containers.podman.podman_secret:
    name: eda_redis_password
    data: '{{ hostvars["localhost"]["_eda_redis_password"] }}'
    skip_existing: '{{ _podman_idempotence | ternary(omit, true) }}'
    force: '{{ _podman_idempotence | ternary(omit, true) }}'
  when: groups['automationeda'] | length > 1
  notify:
    - Restart eda api
    - Restart eda daphne
    - Restart eda workers
    - Restart eda activation workers
    - Restart eda scheduler

- name: Get all podman secrets after update
  containers.podman.podman_secret_info:
  register: _secrets_update

- name: Set eda recreate container fact
  ansible.builtin.set_fact:
    __eda_recreate: '{{ _eda_before | difference(_eda_after) | length > 0 }}'
  vars:
    _eda_before: '{{ _secrets.secrets | map(attribute="ID") }}'
    _eda_after: '{{ _secrets_update.secrets | map(attribute="ID") }}'
...
