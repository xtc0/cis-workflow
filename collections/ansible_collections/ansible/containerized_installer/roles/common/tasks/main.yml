---
- name: Get service facts
  ansible.builtin.service_facts:
  become: true

- name: Configure sub UID/GIDs
  ansible.builtin.include_tasks: subids.yml

- name: Run ostree tasks
  ansible.builtin.include_tasks: ostree.yml

- name: Set common facts
  ansible.builtin.include_tasks: facts.yml

- name: Ostree-based OS setup
  when: ostree | bool
  block:
    - name: Get package Facts
      ansible.builtin.package_facts:
      become: true

    - name: Ensure container tools packages are present
      ansible.builtin.assert:
        that:
          - 'item in ansible_facts["packages"]'
        fail_msg: 'On OSTree based system, the following package needs to be present: {{ item }}'
      loop: '{{ podman_packages }}'

    - name: Ensure python3-cryptography and python3-psycopg2 python packages are present
      ansible.builtin.assert:
        that:
          - '"python3-cryptography" in ansible_facts["packages"]'
          - '"python3-psycopg2" in ansible_facts["packages"]'
        fail_msg: 'On OSTree based system, the following packages need to be present: python3-cryptography and python3-psycopg2'
      when: >
        inventory_hostname in groups.get('automationcontroller', []) or
        inventory_hostname in groups.get('automationeda', []) or
        inventory_hostname in groups.get('automationhub', [])

    - name: Ensure python3-cryptography python package is present
      ansible.builtin.assert:
        that:
          - '"python3-cryptography" in ansible_facts["packages"]'
        fail_msg: 'On OSTree based system, the python3-cryptography package needs to be present'
      when: >
        inventory_hostname in groups.get('database', []) or
        inventory_hostname in groups.get('execution_nodes', [])

    - name: Ensure python3-firewall package is present
      ansible.builtin.assert:
        that:
          - '"python3-firewall" in ansible_facts["packages"]'
        fail_msg: 'On OSTree based system, the following package needs to be present: python3-firewall'
      when:
        - ansible_facts.services.get('firewalld.service', {}) | length
        - ansible_facts.services['firewalld.service']['status'] == 'enabled'

- name: Install container tools
  ansible.builtin.package:
    name: '{{ podman_packages }}'
  become: true
  when: not ostree | bool

- name: Configure keyring size if needed
  when:
    - (ansible_memtotal_mb // 100) > 200
    - inventory_hostname in groups.get('automationcontroller', []) or
      inventory_hostname in groups.get('automationeda', []) or
      inventory_hostname in groups.get('execution_nodes', [])
  become: true
  # Default bytes per key is 100 so continue that ratio with new max number of keys
  block:
    - name: Set maxkeys
      ansible.posix.sysctl:
        name: kernel.keys.maxkeys
        value: '{{ (ansible_memtotal_mb // 100) + 100 }}'
        sysctl_set: true

    - name: Set maxbytes
      ansible.posix.sysctl:
        name: kernel.keys.maxbytes
        value: '{{ ansible_memtotal_mb + 100 }}'
        sysctl_set: true

- name: Create the containers config directory
  ansible.builtin.file:
    path: '{{ ansible_user_dir }}/.config/containers'
    state: directory
    mode: '0755'

- name: Configure podman runtime with crun
  ansible.builtin.template:
    src: containers.conf.j2
    dest: '{{ ansible_user_dir }}/.config/containers/containers.conf'
    mode: '0644'

- name: Configure podman execution plane
  ansible.builtin.include_tasks: executionplane.yml
  when: >
    inventory_hostname in groups.get('automationcontroller', []) or
    inventory_hostname in groups.get('automationeda', []) or
    inventory_hostname in groups.get('execution_nodes', [])

- name: Install polkit
  ansible.builtin.package:
    name: polkit
  become: true
  when: not ostree | bool

- name: Ensure polkit is started
  ansible.builtin.service:
    name: polkit
    state: started
    enabled: true
  become: true

- name: Ensure user belongs to the systemd-journald group
  ansible.builtin.user:
    name: '{{ ansible_user_id }}'
    groups: systemd-journal
    append: true
  register: systemd_journal_group
  become: true

- name: Disable lingering for ansible_user # noqa: no-handler
  ansible.builtin.command: loginctl disable-linger {{ ansible_user_id }}
  args:
    removes: '/var/lib/systemd/linger/{{ ansible_user_id }}'
  when: systemd_journal_group is changed

- name: Enable lingering for ansible_user
  ansible.builtin.command: loginctl enable-linger {{ ansible_user_id }}
  args:
    creates: '/var/lib/systemd/linger/{{ ansible_user_id }}'

- name: Set podman version facts
  ansible.builtin.include_tasks: podman_facts.yml

- name: Include registry tasks
  ansible.builtin.include_tasks: registry.yml
  when:
    - not bundle_install | bool
    - registry_auth | bool

- name: Include container image tasks
  ansible.builtin.include_tasks: images.yml

- name: Offline container images workflow
  when: bundle_install | bool
  vars:
    __images: '{{ _images | union((__de_images | default([])) | union(__ee_images | default([]))) | unique }}'
  block:
    - name: Install compress/rsync packages
      ansible.builtin.package:
        name:
          - '{{ container_compress }}'
          - rsync
      become: true
      when: not ostree | bool

    - name: Create temporary directory for container tarballs
      ansible.builtin.tempfile:
        path: '{{ images_tmp_dir | default(omit) }}'
        state: directory
        suffix: images
      register: images_tmp

    - name: Copy bundled container images
      block:
        - name: Create temporary file for rsync filter
          ansible.builtin.tempfile:
            state: file
          register: rsync_filter
          delegate_to: localhost

        - name: Create the rsync filter
          ansible.builtin.template:
            src: rsync-filter.j2
            dest: '{{ rsync_filter.path }}'
            mode: '0644'
          delegate_to: localhost
          vars:
            _all_images: '{{ __images | map("basename") | map("split", ":") | map("first") }}'

        - name: Copy bundled container images
          ansible.posix.synchronize:
            src: '{{ bundle_dir }}/images/'
            dest: '{{ images_tmp.path }}'
            rsync_opts:
              - '--include-from={{ rsync_filter.path }}'
      rescue:
        - name: Copy bundled container images (legacy)
          ansible.builtin.copy:
            src: '{{ bundle_dir }}/images/'
            dest: '{{ images_tmp.path }}'
            mode: '0644'
      always:
        - name: Remove temorary rsync filter file
          ansible.builtin.file:
            path: '{{ rsync_filter.path }}'
            state: absent
          delegate_to: localhost
          when: rsync_filter.path is defined

    - name: Uncompress bundled container images
      ansible.builtin.command: '{{ container_compress }} -d {{ images_tmp.path }}/{{ image }}.tar.gz'
      args:
        creates: '{{ images_tmp.path }}/{{ image }}.tar'
      loop: '{{ __images }}'
      vars:
        image: '{{ (item | basename).split(":")[0] }}'

    - name: Load the controlplane container images
      containers.podman.podman_load:
        path: '{{ images_tmp.path }}/{{ image }}.tar'
      loop: '{{ _images | unique }}'
      vars:
        image: '{{ (item | basename).split(":")[0] }}'

    - name: Load the executionplane container images
      containers.podman.podman_load:
        path: '{{ images_tmp.path }}/{{ image }}.tar'
      environment:
        CONTAINERS_STORAGE_CONF: '{{ ansible_user_dir }}/aap/containers/storage.conf'
      loop: '{{ (__de_images | default([])) | union(__ee_images | default([])) | unique }}'
      vars:
        image: '{{ (item | basename).split(":")[0] }}'
  always:
    - name: Remove temporary directory
      ansible.builtin.file:
        path: "{{ images_tmp.path }}"
        state: absent
      when: images_tmp.path is defined

- name: Online container images workflow
  when: not bundle_install | bool
  block:
    - name: Pull the controlplane container images
      containers.podman.podman_image:
        name: '{{ item }}'
        pull: true
        force: '{{ container_pull_images | bool }}'
        validate_certs: '{{ registry_tls_verify }}'
      loop: '{{ _images | unique }}'
      environment:
        HTTP_PROXY: "{{ http_proxy | default('') }}"
        HTTPS_PROXY: "{{ https_proxy | default('') }}"
        NO_PROXY: "{{ no_proxy | default('') }}"

    - name: Pull the executionplane container images
      containers.podman.podman_image:
        name: '{{ item }}'
        pull: true
        force: '{{ container_pull_images | bool }}'
        validate_certs: '{{ registry_tls_verify }}'
      environment:
        CONTAINERS_STORAGE_CONF: '{{ ansible_user_dir }}/aap/containers/storage.conf'
        HTTP_PROXY: "{{ http_proxy | default('') }}"
        HTTPS_PROXY: "{{ https_proxy | default('') }}"
        NO_PROXY: "{{ no_proxy | default('') }}"
      loop: '{{ (__de_images | default([])) | union(__ee_images | default([])) | unique }}'

- name: Configure firewalld
  ansible.builtin.include_tasks: firewalld.yml

- name: Configure TLS CA
  ansible.builtin.include_tasks: tls.yml
...
