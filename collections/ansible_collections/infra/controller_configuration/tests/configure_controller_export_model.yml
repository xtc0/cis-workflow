---
- name: Playbook to configure ansible controller post installation
  hosts: localhost
  connection: local
  vars:
    workflow_job_templates_secure_logging: false
    controller_validate_certs: false
  collections:
    - awx.awx
    - infra.controller_configuration
  # Define following vars here, or in configs/controller_auth.yml
  # controller_hostname: controller.example.com
  # controller_username: admin
  # controller_password: changeme
  pre_tasks:

    - name: "Determine collection (block)"
      block:
        - name: "Check if the collection ansible.controller is installed"
          ansible.builtin.set_fact:
            ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
          failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
      rescue:
        - name: "Check if the collection awx.awx is installed"
          ansible.builtin.set_fact:
            awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
          failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          ansible.builtin.set_fact:
            controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          ansible.builtin.fail:
            msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
          when: controller_api_plugin is match('NONE')
        - name: "Show the plugin we are using"
          ansible.builtin.debug:
            msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

    - name: Include vars from controller_configs directory
      ansible.builtin.include_vars:
        dir: ./configs_export_model
        ignore_files: [README.md]
        extensions: ["yml"]

    - name: Wait for the controller to be up
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}/api/v2/mesh_visualizer/"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
        status_code: 200
        body_format: json
      register: mesh_data
      until: mesh_data.json is defined
      retries: 120
      delay: 5


  roles:
    - {role: organizations, when: organizations is defined, tags: organizations}
    - {role: users, when: users is defined, tags: users}
    - {role: teams, when: teams is defined, tags: teams}
    - {role: credential_types, when: credential_types is defined, tags: credential_types}
    - {role: credentials, when: credentials is defined, tags: credentials}
    - {role: inventories, when: inventory is defined, tags: inventories}
    - {role: inventory_sources, when: inventory_sources is defined, tags: inventory_sources}
    - {role: projects, when: projects is defined, tags: projects}
    - {role: project_update, when: projects is defined, tags: projects}
    - {role: job_templates, when: job_templates is defined, tags: job_templates}
    - {role: workflow_job_templates, when: workflow_job_templates is defined, tags: workflow_job_templates}
    - {role: notification_templates, when: notification_templates is defined, tags: notification_templates}

  tasks:
    # Need to install inside the venv for collection testing.
    - name: Install awxkit python package
      ansible.builtin.pip:
        name: awxkit
        version: 22.3.0

    - name: Export workflow job template
      infra.controller_configuration.controller_export_diff:
        all: true
        compare_items:
          organizations: "{{ organizations }}"
          projects: "{{ projects }}"
          credential_types: "{{ credential_types }}"
          credentials: "{{ credentials }}"
          inventory: "{{ inventory }}"
          inventory_sources: "{{ inventory_sources }}"
          notification_templates: "{{ notification_templates }}"
          teams: "{{ teams }}"
          users: "{{ users }}"
          job_templates: "{{ job_templates }}"
        with_present: false
        controller_host: "{{ controller_hostname }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_validate_certs }}"
      register: export_results

    - name: Determine if AWX>=25.0.0
      ansible.builtin.set_fact:
        __is_gte_awx25: "{{ awx_version == 'devel' or awx_version is version('25.0.0', '>=') }}"

    - name: Export output
      ansible.builtin.debug:
        var: export_results.difference

    - name: Differential_expected output
      ansible.builtin.debug:
        var: differential_expected
      when: not __is_gte_awx25

    - name: Differential_expected output
      ansible.builtin.debug:
        var: differential_expected_gte_awx25
      when: __is_gte_awx25

    - name: "Assert that the expected results match for {{ differential_item.name }}"
      ansible.builtin.assert:
        that: export_results.difference == differential_expected
      when: not __is_gte_awx25

    - name: "Assert that the expected results match for {{ differential_item.name }}"
      ansible.builtin.assert:
        that: export_results.difference == differential_expected_gte_awx25
      when: __is_gte_awx25
...
