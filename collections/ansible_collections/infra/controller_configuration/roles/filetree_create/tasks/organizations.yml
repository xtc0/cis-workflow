---
- name: "Get current Organizations from the API"
  ansible.builtin.set_fact:
    orgs_lookvar: "{{ query(controller_api_plugin, 'api/v2/organizations/',
                            query_params=(query_params | combine({'id': organization_id})) if organization_id is defined else query_params,
                            host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                            return_all=true, max_objects=query_controller_api_max_objects)
                   }}"
  vars:
    query_params:
      order_by: 'id'
  no_log: "{{ controller_configuration_filetree_create_secure_logging }}"

- name: "Block for to generate flatten output"
  when:
    - flatten_output is defined
    - flatten_output | bool
  vars:
    __dest: "{{ output_path }}/organizations.yaml"
  block:
    - name: "Add current organizations to the organizations flat file"
      ansible.builtin.blockinfile:
        create: true
        mode: "0644"
        insertafter: EOF
        path: "{{ __dest }}"
        marker: ""
        block: "{{ lookup('template', 'templates/current_organizations.j2') }}"
      vars:
        query_notification_error: "{{ query(controller_api_plugin, current_organization.related.notification_templates_error,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_started: "{{ query(controller_api_plugin, current_organization.related.notification_templates_started,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_success: "{{ query(controller_api_plugin, current_organization.related.notification_templates_success,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_approvals: "{{ query(controller_api_plugin, current_organization.related.notification_templates_approvals,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        last_organization: "{{ current_organization_index == ((orgs_lookvar | length) - 1) }}"
      loop: "{{ orgs_lookvar }}"
      loop_control:
        index_var: current_organization_index
        loop_var: current_organization
        label: "{{ __dest }}"
      no_log: "{{ controller_configuration_filetree_create_secure_logging }}"

    - name: "Remove all the blank lines introduced by the last task"
      ansible.builtin.lineinfile:
        path: "{{ __dest }}"
        line: ''
        state: absent

- name: "Block for to generate the filetre_create normal output"
  when: flatten_output is not defined or not (flatten_output | bool)
  block:
    - name: "Create the output directory for organizations: {{ output_path + '/' + current_organization_dir.name }}"
      ansible.builtin.file:
        path: "{{ __path }}"
        state: directory
        mode: '0755'
      vars:
        __path: "{{ output_path }}/{{ current_organization_dir.name | regex_replace('/', '_') }}"
      loop: "{{ orgs_lookvar }}"
      loop_control:
        loop_var: current_organization_dir
        label: "{{ __path }}"

    - name: "Add current organizations to the output yaml file"
      ansible.builtin.template:
        src: "templates/current_organizations.j2"
        dest: "{{ __dest }}"
        mode: '0644'
      vars:
        __dest: "{{ output_path }}/{{ current_organization.name | regex_replace('/', '_') }}/current_organization.yaml"
        query_notification_error: "{{ query(controller_api_plugin, current_organization.related.notification_templates_error,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_started: "{{ query(controller_api_plugin, current_organization.related.notification_templates_started,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_success: "{{ query(controller_api_plugin, current_organization.related.notification_templates_success,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_approvals: "{{ query(controller_api_plugin, current_organization.related.notification_templates_approvals,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
      loop: "{{ orgs_lookvar }}"
      loop_control:
        loop_var: current_organization
        label: "{{ __dest }}"
      no_log: "{{ controller_configuration_filetree_create_secure_logging }}"
...
