---
- name: "Get current Job Templates from the API"
  ansible.builtin.set_fact:
    job_templates_lookvar: "{{ query(controller_api_plugin, 'api/v2/job_templates/',
                                     query_params=(query_params | combine({'organization': organization_id} if organization_id is defined else {},
                                     {'project': project_id} if project_id is defined else {},
                                     {'id': job_template_id} if job_template_id is defined else {})),
                                     host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                                     return_all=true, max_objects=query_controller_api_max_objects)
                            }}"
  vars:
    query_params:
      order_by: 'organization,id'
  no_log: "{{ controller_configuration_filetree_create_secure_logging }}"

- name: "Block for to generate flatten output"
  when:
    - flatten_output is defined
    - flatten_output | bool
  vars:
    __dest: "{{ output_path }}/job_templates.yaml"
  block:
    - name: "Add current job_templates to the job_templates flat file"
      ansible.builtin.blockinfile:
        create: true
        mode: "0644"
        insertafter: EOF
        path: "{{ __dest }}"
        marker: ""
        block: "{{ lookup('template', 'templates/current_job_templates.j2') }}"
      vars:
        job_template_organization: "{{ current_job_templates_asset_value.summary_fields.organization.name | default('ORGANIZATIONLESS') }}"
        job_template_id: "{{ current_job_templates_asset_value.id }}"
        job_template_name: "{{ current_job_templates_asset_value.name | regex_replace('/', '_') }}"
        query_labels: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.labels,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_error: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.notification_templates_error,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_started: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.notification_templates_started,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_success: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.notification_templates_success,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        last_job_template: "{{ current_job_template_index == ((job_templates_lookvar | length) - 1) }}"
      loop: "{{ job_templates_lookvar }}"
      loop_control:
        index_var: current_job_template_index
        loop_var: current_job_templates_asset_value
        label: "{{ __dest }}"
      no_log: "{{ controller_configuration_filetree_create_secure_logging }}"

    - name: "Remove all the blank lines introduced by the last task"
      ansible.builtin.lineinfile:
        path: "{{ __dest }}"
        line: ''
        state: absent

- name: "Block for to generate the filetre_create normal output"
  when: flatten_output is not defined or not (flatten_output | bool)
  block:
    - name: "Create the <ORGANIZATION_NAME> output directories for job templates in {{ output_path }}"
      ansible.builtin.file:
        path: "{{ __path }}"
        state: directory
        mode: '0755'
      vars:
        __path: "{{ output_path }}/{{ needed_path | regex_replace('/', '_') }}/job_templates"
      loop: "{{ (job_templates_lookvar | map(attribute='summary_fields') | selectattr('organization', 'defined') | map(attribute='organization') | map(attribute='name') | list | flatten | unique)
                + (['ORGANIZATIONLESS'] if ((job_templates_lookvar | map(attribute='summary_fields') | selectattr('organization', 'undefined') | list | flatten) | length > 0) else [])
             }}"
      loop_control:
        loop_var: needed_path
        label: "{{ __path }}"

    - name: "Add current job_templates to the <ORGANIZATION_NAME>/job_templates output file in {{ output_path }}"
      ansible.builtin.template:
        src: "templates/current_job_templates.j2"
        dest: "{{ __dest }}"
        mode: '0644'
      vars:
        job_template_organization: "{{ current_job_templates_asset_value.summary_fields.organization.name | default('ORGANIZATIONLESS') }}"
        job_template_id: "{{ current_job_templates_asset_value.id }}"
        job_template_name: "{{ current_job_templates_asset_value.name | regex_replace('/', '_') }}"
        __dest: "{{ output_path }}/{{ job_template_organization | regex_replace('/', '_') }}/job_templates/{{ job_template_id }}_{{ job_template_name | regex_replace('/', '_') }}.yaml"
        query_labels: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.labels,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_error: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.notification_templates_error,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_started: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.notification_templates_started,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
        query_notification_success: "{{ query(controller_api_plugin, current_job_templates_asset_value.related.notification_templates_success,
                         host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                         return_all=true, max_objects=query_controller_api_max_objects) }}"
      loop: "{{ job_templates_lookvar }}"
      loop_control:
        loop_var: current_job_templates_asset_value
        label: "{{ __dest }}"
      no_log: "{{ controller_configuration_filetree_create_secure_logging }}"
...
