---
# tasks file for object_diff
- name: "Check requirements (block)"
  tags:
    - always
  block:
    - name: "Check installed module collections (block)"
      block:
        - name: "Check if the collection ansible.controller is installed"
          ansible.builtin.set_fact:
            ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
          failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
      rescue:
        - name: "Check if the collection awx.awx is installed"
          ansible.builtin.set_fact:
            awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
          failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          ansible.builtin.set_fact:
            controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          ansible.builtin.fail:
            msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
          when: controller_api_plugin is match('NONE')
        - name: "Show the plugin we are using"
          ansible.builtin.debug:
            msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

    - name: "Check installed role collections (block)"
      block:
        - name: "Check if the collection infra.controller_configuration is installed"
          ansible.builtin.set_fact:
            infra_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i infra.controller_configuration || echo NOTINSTALLED') }}"
          failed_when: infra_controller_collection_installed is match('NOTINSTALLED')
      rescue:
        - name: "Check if the collection redhat_cop.controller_configuration is installed"
          ansible.builtin.set_fact:
            redhat_cop_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i redhat_cop.controller_configuration || echo NOTINSTALLED') }}"
          failed_when: redhat_cop_collection_installed is match('NOTINSTALLED')
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          ansible.builtin.set_fact:
            controller_role_plugin: "{{ ('infra.controller_configuration.controller_object_diff' if infra_controller_collection_installed is defined) | default('redhat_cop.controller_configuration.controller_object_diff' if redhat_cop_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          ansible.builtin.fail:
            msg: "One of the following collections is required to be installed: 'infra.controller_configuration' or 'redhat_cop.controller_configuration'."
          when: controller_role_plugin is match('NONE')
        - name: "Show the plugin we are using"
          ansible.builtin.debug:
            msg: "Using the 'controller_role' plugin from: {{ controller_role_plugin }}"

- name: "Check if the connection is to an Ansible Tower or to Automation Platform"
  ansible.builtin.set_fact:
    is_aap: "{{ lookup(controller_api_plugin, 'ping',
                       host=controller_hostname, oauth_token=controller_oauthtoken,
                       verify_ssl=controller_validate_certs).version is version('4.0.0', '>=') }}"
  no_log: "{{ controller_configuration_object_diff_secure_logging }}"
  tags:
    - always

- name: "Include Tasks to get OBJECT DIFF"
  ansible.builtin.include_tasks: "{{ __task_diff.name }}.yml"
  args:
    apply:
      tags: "{{ __task_diff.tags }}"
  tags:
    - always
  loop: "{{ controller_configuration_object_diff_tasks }}"
  loop_control:
    loop_var: __task_diff
...
